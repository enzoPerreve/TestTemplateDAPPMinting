{"version":3,"sources":["shared/components/Dropzone.js","shared/components/ColoredButton.js"],"names":["getColor","isDragAccept","isDragReject","theme","palette","success","main","error","dark","common","black","withStyles","button","borderWidth","borderColor","borderTopLeftRadius","borderBottomLeftRadius","fullHeight","height","withTheme","props","onDrop","accept","children","classes","style","useDropzone","getRootProps","getInputProps","fullWidth","className","classNames","variant","color","ColoredButton","buttonTheme","createMuiTheme","primary","buttonProps","memo"],"mappings":"8NAmBA,SAASA,EAASC,EAAcC,EAAcC,GAC5C,OAAIF,EACKE,EAAMC,QAAQC,QAAQC,KAE3BJ,EACKC,EAAMC,QAAQG,MAAMC,KAEtBL,EAAMC,QAAQK,OAAOC,MA2CfC,sBA9DA,CACbC,OAAQ,CACNC,YAAa,EACbC,YAAa,sBACbC,oBAAqB,EACrBC,uBAAwB,GAE1BC,WAAY,CACVC,OAAQ,SAsDsB,CAAEC,WAAW,GAAhCR,EAxCf,SAAkBS,GAChB,IAAQC,EAAgED,EAAhEC,OAAQC,EAAwDF,EAAxDE,OAAQL,EAAgDG,EAAhDH,WAAYM,EAAoCH,EAApCG,SAAUC,EAA0BJ,EAA1BI,QAASC,EAAiBL,EAAjBK,MAAOtB,EAAUiB,EAAVjB,MAC9D,EAKIuB,YAAY,CACdJ,OAAQA,EACRD,OAAQA,IANRM,EADF,EACEA,aACAC,EAFF,EAEEA,cACA3B,EAHF,EAGEA,aACAC,EAJF,EAIEA,aAKF,OACE,eAAC,IAAD,2BAASyB,KAAT,IAAyBT,OAAO,OAAhC,UACE,qCAAWU,MACX,cAAC,IAAD,CACEC,WAAS,EACTC,UAAWC,IACTd,EAAaO,EAAQP,WAAa,KAClCO,EAAQZ,QAEVoB,QAAQ,WACRC,MAAOjC,EAASC,EAAcC,EAAcC,GAC5CsB,MAAOA,EART,SAUGF,Y,gICjDT,SAASW,EAAcd,GACrB,IAAQa,EAA2Bb,EAA3Ba,MAAOV,EAAoBH,EAApBG,SAAUpB,EAAUiB,EAAVjB,MACnBgC,EAAcC,YAAe,2BAC9BjC,GAD6B,IAEhCC,QAAS,CACPiC,QAAS,CACP/B,KAAM2B,OAINK,EAAe,cAAGL,MAAH,EAAU9B,MAAV,EAAiBoB,SAAjB,yBAAyCH,GAC9D,OACE,cAAC,IAAD,CAAkBjB,MAAOgC,EAAzB,SACE,cAAC,IAAD,2BAAYG,GAAZ,IAAyBL,MAAM,UAA/B,SACGV,OAUMgB,mBAAKL","file":"static/js/13.c0bbcb19.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useDropzone } from \"react-dropzone\";\nimport classNames from \"classnames\";\nimport { Box, withStyles } from \"@material-ui/core\";\nimport ColoredButton from \"./ColoredButton\";\n\nconst styles = {\n  button: {\n    borderWidth: 1,\n    borderColor: \"rgba(0, 0, 0, 0.23)\",\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0\n  },\n  fullHeight: {\n    height: \"100%\"\n  }\n};\n\nfunction getColor(isDragAccept, isDragReject, theme) {\n  if (isDragAccept) {\n    return theme.palette.success.main;\n  }\n  if (isDragReject) {\n    return theme.palette.error.dark;\n  }\n  return theme.palette.common.black;\n}\n\nfunction Dropzone(props) {\n  const { onDrop, accept, fullHeight, children, classes, style, theme } = props;\n  const {\n    getRootProps,\n    getInputProps,\n    isDragAccept,\n    isDragReject\n  } = useDropzone({\n    accept: accept,\n    onDrop: onDrop\n  });\n  return (\n    <Box {...getRootProps()} height=\"100%\">\n      <input {...getInputProps()} />\n      <ColoredButton\n        fullWidth\n        className={classNames(\n          fullHeight ? classes.fullHeight : null,\n          classes.button\n        )}\n        variant=\"outlined\"\n        color={getColor(isDragAccept, isDragReject, theme)}\n        style={style}\n      >\n        {children}\n      </ColoredButton>\n    </Box>\n  );\n}\n\nDropzone.propTypes = {\n  classes: PropTypes.object.isRequired,\n  theme: PropTypes.object.isRequired,\n  onDrop: PropTypes.func,\n  accept: PropTypes.string,\n  fullHeight: PropTypes.bool,\n  style: PropTypes.object,\n  children: PropTypes.oneOfType([PropTypes.element, PropTypes.func])\n};\n\nexport default withStyles(styles, { withTheme: true })(Dropzone);\n","import React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, createMuiTheme, MuiThemeProvider } from \"@material-ui/core\";\n\nfunction ColoredButton(props) {\n  const { color, children, theme } = props;\n  const buttonTheme = createMuiTheme({\n    ...theme,\n    palette: {\n      primary: {\n        main: color\n      }\n    }\n  });\n  const buttonProps = (({ color, theme, children, ...o }) => o)(props);\n  return (\n    <MuiThemeProvider theme={buttonTheme}>\n      <Button {...buttonProps} color=\"primary\">\n        {children}\n      </Button>\n    </MuiThemeProvider>\n  );\n}\n\nColoredButton.propTypes = {\n  color: PropTypes.string.isRequired\n};\n\nexport default memo(ColoredButton);\n"],"sourceRoot":""}